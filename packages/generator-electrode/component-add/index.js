'use strict';

/* eslint-disable arrow-parens */

var generators = require('yeoman-generator');
var chalk = require('chalk');
var yosay = require('yosay');
var path = require('path');
var _ = require('lodash');
var extend = _.merge;
var parseAuthor = require('parse-author');
var githubUsername = require('github-username');
var glob = require("glob");
//var fs = require("fs");

/*
* This generator should check that it is invoked from within a packages folder
* so check if cwd ends in packages. also that there is a demo-app folder present
* demo app folder path should be at the same level as packages.
* then check if 'demo-app/package.json' and 'demo-app/src/client/components/home.jsx' exist.
* The folder structure is now sufficiently verified. 
* generate the component in the cwd and npmi 
* modify the demo-app package to add new package.
* modify the demo-app component home.jsx to import the new packages/component and use class in the div
*/



module.exports = generators.Base.extend({
  constructor: function () {
    generators.Base.apply(this, arguments);
    this.packageName = this.options.packageName || "demo-app";
    this.developerName = this.options.developerName || "demoDeveloper";
    this.className = this.options.className;
  },

  initializing: function () {
    let appPkgPath = '';
    let homeComponentPath = '';
    let demoAppName = '';

    //This function checks if all required pieces are present
    const checkError = () => {
      if (_.isEmpty(demoAppName)) {
        this.env.error("We could not find your demo-app. Make sure your directory structure is preserved after running `yo electrode-component");
      }
      if (_.isEmpty(this.pkg)) {
        this.env.error("We could not find package.json for your demo-app. Make sure your directory structure is preserved after running `yo electrode-component");
      }
      if (_.isEmpty(this.homeComponent)) {
        this.env.error("We could not find home.jsx for your demo-app. Make sure your directory structure is preserved after running `yo electrode-component");
      }
    };

    //check is the command is run from the correct directory
    if (process.cwd().split("/").pop() != "packages") {
      this.env.error("You need to run this commnand from the `packages` folder generated by running `yo electrode:component");
    }

    try {
      demoAppName = glob.sync("../**-demo-app").pop().split("/").pop();
      this.pkg = this.fs.readJSON(this.destinationPath("../" + demoAppName + "/package.json"));
      this.homeComponent = this.fs.read(this.destinationPath("../" + demoAppName + "/src/client/components/home.jsx"));
    }
    catch (e) {
      checkError();
    }

    // check for missing
    checkError();

    // We can call the component generator now

  },
  default: function () {
    let options = {
      isAddon: true
    };
    this.composeWith('electrode:component', { options }, {
      local: require.resolve('../component')
    });
  },
  writing: function () {

    //add new package to the dependencies
    //this.pkg.dependencies[this.packageName] = "../packages/" + this.packageName;
    //console.log(this.pkg);

    //add content to the home file, parse react for that
    //@TODO: while writing check to see if the demo App/ already exists
    // if so, we only need to edit the package.json to add and point to the new package
    // Also, update the home.jsx to use the new package.

    /*
    var newRoot = this.destinationPath() + '/' + _.kebabCase(_.deburr(this.packageName)) + "-demo-app";
    this.destinationRoot(newRoot);
    this.template("_package.json", "package.json");
  
    const rootConfigsToCopy = ['gulpfile.js', 'config', 'test', 'archetype'];
    rootConfigsToCopy.forEach((f) => {
      this.template(
        this.templatePath(f),
        this.destinationPath(f)
      );
    });
  
    //special handling for the server file
    this.fs.copyTpl(
      this.templatePath('src/server'),
      this.destinationPath('src/server')
    ); */

  },

  install: function () {
    // if (!this.isExtended) {
    //   this.installDependencies({
    //     bower: false
    //   });
    // }
  },

  end: function () {
    if (this.props.quoteType === "'") {
      this.spawnCommandSync("node_modules/.bin/eslint", ["--fix", "src", "test", "config", "--ext", ".js,.jsx"]);
    }

    var chdir = this.props.createDirectory ? "'cd " + _.kebabCase(_.deburr(this.props.name)) + "' then " : "";
    this.log(
      "\n" + chalk.green.underline("Your new Electrode Demo application is ready!") +
      "\n" +
      "\nType " + chdir + "'gulp dev' to start the server." +
      "\n"
    );
  }
});
